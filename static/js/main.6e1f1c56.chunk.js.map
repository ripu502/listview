{"version":3,"sources":["components/cart.module.css","components/cartComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cartComponent","state","isLoading","data","componentDidMount","axios","get","then","res","list","slice","sort","a","b","x","status","toLowerCase","y","x1","date","split","reverse","join","y1","setState","catch","err","console","log","content","this","href","cartClass","classes","Cart","push","map","person","index","className","key","id","data-wow-duration","Img","src","img","alt","Details","name","gender","Container","GridContainer","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,cAAgB,4BAA4B,KAAO,mBAAmB,QAAU,wB,mMC8EvHC,E,4MAxEXC,MAAQ,CACJC,WAAW,EACXC,KAAM,M,EAGVC,kBAAoB,WAChBC,IAAMC,IAAI,+EACLC,MAAK,SAAAJ,GACF,IAAIK,EAAML,EAAKA,KAAKM,KAAKC,MAAM,GAAGC,MAAK,SAACC,EAAGC,GACvC,IAAIC,EAAIF,EAAEG,OAAOC,cACbC,EAAIJ,EAAEE,OAAOC,cACjB,GAAIF,EAAIG,EACJ,OAAQ,EAEZ,GAAIH,EAAIG,EACJ,OAAO,EAEX,IAAIC,EAAKN,EAAEO,KAAKC,MAAM,KAAKC,UAAUC,KAAK,IACtCC,EAAKV,EAAEM,KAAKC,MAAM,KAAKC,UAAUC,KAAK,IAC1C,OAAOJ,EAAKK,EAAK,EAAIL,EAAKK,GAAM,EAAI,KAGxC,EAAKC,SAAS,CACVtB,WAAW,EACXC,KAAMK,OAGbiB,OAAM,SAAAC,GACH,EAAKF,SAAS,CACVtB,WAAW,IAEfyB,QAAQC,IAAIF,O,uDAMpB,IAAIG,EAAU,4CACd,IAA6B,IAAzBC,KAAK7B,MAAMC,YACa,OAApB4B,KAAK7B,MAAME,OACX0B,EAAU,6EAAkD,uBAAGE,KAAK,wGAAR,cAAlD,uBAES,MAAnBD,KAAK7B,MAAME,MAAc,CACzB,IAAI6B,EAAY,CAACC,IAAQC,MAEzBF,EAAUG,KAAK,iBACfN,EAAUC,KAAK7B,MAAME,KAAKiC,KAAI,SAACC,EAAQC,GACnC,OAAQ,yBAAKC,UAAWP,EAAUV,KAAK,KAAMkB,IAAKH,EAAOI,GAAIC,oBAAkB,QAC3E,yBAAKH,UAAWN,IAAQU,KACpB,yBAAKC,IAAKP,EAAOQ,IACbC,IAAI,mBAEZ,yBAAKP,UAAWN,IAAQc,SACpB,2BAAG,oCAAH,IAAiBV,EAAOW,MACxB,2BAAG,sCAAH,IAAqC,MAAlBX,EAAOY,OAAiB,OAAS,UACpD,2BAAG,oCAAH,IAAiBZ,EAAOlB,MACxB,2BAAG,sCAAH,IAAmBkB,EAAOtB,aAM9C,OACI,yBAAKwB,UAAWN,IAAQiB,WACpB,yBAAKX,UAAWN,IAAQkB,eACnBtB,Q,GAnEOuB,aCQbC,E,uKANX,OACE,kBAAC,EAAD,U,GAJYC,IAAMF,WCQJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.6e1f1c56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"cart_Container__voB9N\",\"GridContainer\":\"cart_GridContainer__1Yu_M\",\"Cart\":\"cart_Cart__14NMP\",\"Details\":\"cart_Details__2Ou__\"};","import React, { Component } from 'react';\nimport classes from './cart.module.css'\nimport axios from 'axios';\n\n\nclass cartComponent extends Component {\n\n    state = {\n        isLoading: true,\n        data: null,\n    }\n\n    componentDidMount = () => {\n        axios.get('https://5w05g4ddb1.execute-api.ap-south-1.amazonaws.com/dev/profile/listAll')\n            .then(data => {\n                let res = data.data.list.slice(0).sort((a, b) => {\n                    var x = a.status.toLowerCase();\n                    var y = b.status.toLowerCase();\n                    if (x < y) {\n                        return -1\n                    }\n                    if (x > y) {\n                        return 1\n                    }\n                    let x1 = a.date.split('/').reverse().join('');\n                    let y1 = b.date.split('/').reverse().join('');\n                    return x1 > y1 ? 1 : x1 < y1 ? -1 : 0;\n                    // return x < y ? -1 : x > y ? 1 : 0;\n                })\n                this.setState({\n                    isLoading: false,\n                    data: res\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    isLoading: false,\n                })\n                console.log(err);\n            })\n    }\n\n    render() {\n        // class=\"wow slideInLeft\" data-wow-offset=\"-10\" data-wow-duration=\"3s\" data-wow-delay=\".5s\"\n        let content = <p>'Loading ...'</p>\n        if (this.state.isLoading === false) {\n            if (this.state.data === null) {\n                content = <p>Hope there is issue in Backend May be CORS use <a href=\"https://chrome.google.com/webstore/detail/moesif-orign-cors-changer/digfbfaphojjndkpccljibejjbppifbc\"> Extension</a> and then Refresh </p>\n            }\n            if (this.state.data != null) {\n                let cartClass = [classes.Cart]\n                // fadeIn\n                cartClass.push(\"wow slideInUp\")\n                content = this.state.data.map((person, index) => {\n                    return (<div className={cartClass.join(\" \")} key={person.id} data-wow-duration=\"2.5s\">\n                        <div className={classes.Img}>\n                            <img src={person.img}\n                                alt=\"img not found\" />\n                        </div>\n                        <div className={classes.Details}>\n                            <p><b>Name:</b> {person.name}</p>\n                            <p><b>Gender:</b> {person.gender === 'm' ? \"Male\" : \"Female\"}</p>\n                            <p><b>Date:</b> {person.date}</p>\n                            <p><b>Status:</b> {person.status}</p>\n                        </div>\n                    </div>)\n                })\n            }\n        }\n        return (\n            <div className={classes.Container}>\n                <div className={classes.GridContainer}>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default cartComponent;\n","import React from 'react';\nimport './App.css';\nimport CartComponent from './components/cartComponent';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <CartComponent />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}